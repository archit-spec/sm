[{"file":"src\/screens\/Helpers\/TableSearchFilter.res","target_len":1019,"prompt_snippet":"@react.component\nlet make = (\n  ~data,\n  ~filterLogic=_ => {()},\n  ~placeholder,\n  ~searchVal,\n  ~setSearchVal,\n  ~customSearchBarWrapperWidth=\"w-1\/4\",\n  ~customInputBoxWidth=\"w-72\",\n) => {\n  let filterData = React.useCallback(filterLogic, [])\n\n  React.u","target_snippet":"seEffect(() => {\n    filterData((searchVal, data))\n    None\n  }, [searchVal])\n\n  let onChange = ev => {\n    let value = ReactEvent.Form.target(ev)[\"value\"]\n    setSearchVal(_ => value)\n  }\n\n  let handleSubmit = (_, _) => {Nullable.null->Promise.resolve}\n\n  let inputSearch: ReactFinalForm.fieldRenderPropsInput = {\n    name: \"search\",\n    onBlur: _ => (),\n    onChange,\n    onFocus: _ => (),\n    valu...","generations":["","",""],"best_bleu":0.0,"best_recall":0.0,"best_rougeL":0.0,"exact_match_any":0},{"file":"crates\/hyperswitch_domain_models\/src\/customer.rs","target_len":15521,"prompt_snippet":"#[cfg(all(feature = \"v2\", feature = \"customer_v2\"))]\nuse common_enums::DeleteStatus;\nuse common_utils::{\n    crypto::{self, Encryptable},\n    date_time,\n    encryption::Encryption,\n    errors::{CustomResult, ValidationError},\n    id_type, pii,\n    types::{\n        keymanager::{self, KeyManagerState, ToEncryptable},\n        Description,\n    },\n};\nuse diesel_models::customers::CustomerUpdateInternal...","target_snippet":"f()\n            .and_then(|connector_customer_map| connector_customer_map.get(merchant_connector_id))\n            .map(|connector_customer_id| connector_customer_id.as_str())\n    }\n}\n\n#[cfg(all(any(feature = \"v1\", feature = \"v2\"), not(feature = \"customer_v2\")))]\n#[async_trait::async_trait]\nimpl super::behaviour::Conversion for Customer {\n    type DstType = diesel_models::customers::Customer;\n    t...","generations":["","",""],"best_bleu":0.0,"best_recall":0.0,"best_rougeL":0.0,"exact_match_any":0},{"file":"crates\/router\/tests\/connectors\/zsl.rs","target_len":1391,"prompt_snippet":"use router::types::{self, storage::enums};\nuse test_utils::connector_auth;\n\nuse crate::utils::{self, ConnectorActions};\n\nstruct ZslTest;\nimpl ConnectorActions for ZslTest {}\nimpl utils::Connector for ZslTest {\n    fn get_data(&self) -> types::api::ConnectorData {\n        use router::connector::Zsl;\n        utils::construct_connector_data_old(\n  ","target_snippet":"          Box::new(&Zsl),\n            types::Connector::Adyen,\n            \/\/ Added as Dummy connector as template code is added for future usage\n            types::api::GetToken::Connector,\n            None,\n        )\n    }\n\n    fn get_auth_token(&self) -> types::ConnectorAuthType {\n        utils::to_connector_auth_type(\n            connector_auth::ConnectorAuthentication::new()\n                ....","generations":["","",""],"best_bleu":0.0,"best_recall":0.0,"best_rougeL":0.0,"exact_match_any":0},{"file":"crates\/analytics\/src\/disputes\/filters.rs","target_len":1490,"prompt_snippet":"use api_models::analytics::{disputes::DisputeDimensions, Granularity, TimeRange};\nuse common_utils::errors::ReportSwitchExt;\nuse diesel_models::enums::Currency;\nuse error_stack::ResultExt;\nuse time::PrimitiveDateTime;\n\nuse crate::{\n    enums::AuthInfo,\n    query::{Aggregate, GroupByClause, QueryBuilder, QueryFilter, ToSql, Window},\n    types::{\n        AnalyticsCollecti","target_snippet":"on, AnalyticsDataSource, DBEnumWrapper, FiltersError, FiltersResult,\n        LoadRow,\n    },\n};\npub trait DisputeFilterAnalytics: LoadRow<DisputeFilterRow> {}\n\npub async fn get_dispute_filter_for_dimension<T>(\n    dimension: DisputeDimensions,\n    auth: &AuthInfo,\n    time_range: &TimeRange,\n    pool: &T,\n) -> FiltersResult<Vec<DisputeFilterRow>>\nwhere\n    T: AnalyticsDataSource + DisputeFilterAna...","generations":["","",""],"best_bleu":0.0,"best_recall":0.0,"best_rougeL":0.0,"exact_match_any":0},{"file":"src\/screens\/Sidebar\/Sidebar.res","target_len":17846,"prompt_snippet":"open HeadlessUI\nopen SidebarTypes\n\nlet defaultLinkSelectionCheck = (firstPart, tabLink) => {\n  firstPart->LogicUtils.removeTrailingSlash === tabLink->LogicUtils.removeTrailingSlash\n}\n\nlet getIconSize = buttonType => {\n  switch buttonType {\n  | \"large\" => 42\n  | \"larger\" => 65\n  | _ => 20\n  }\n}\n\nmodule MenuOption = {\n  @react.component\n  let make = (~text=?, ~children=?, ~onClick=?) => {\n    let {g...","target_snippet":"r} flex flex-row items-center cursor-pointer ${selectedClass} p-3`}>\n            {switch selectedIcon {\n            | Some(selectedIcon) =>\n              <SidebarOption name icon isSidebarExpanded isSelected selectedIcon \/>\n            | None => <SidebarOption name icon isSidebarExpanded isSelected \/>\n            }}\n            remoteUi\n          <\/a>\n        <\/RenderIf>\n      }\n\n    | LinkWithTag...","generations":["","",""],"best_bleu":0.0,"best_recall":0.0,"best_rougeL":0.0,"exact_match_any":0},{"file":"src\/Recon\/ReconScreens\/ReconConfiguration\/ConnectProcessors\/ConnectProcessorsHelper.res","target_len":6644,"prompt_snippet":"open HSwitchUtils\nlet p1MediumTextStyle = HSwitchUtils.getTextClass((P1, Medium))\nlet p1RegularText = getTextClass((P1, Regular))\n\nlet generateDropdownOptionsCustomComponent: array<OMPSwitchTypes.ompListTypes> => array<\n  SelectBox.dropdownOption,\n> = dropdownList => {\n  let options: array<SelectBox.dropdownOption> = dropdownList->Array.map((\n    item\n  ): SelectBox.dropdownOption => {\n    let opt...","target_snippet":">String.toUpperCase} className=\"w-6 h-6\" \/>\n          <p\n            className=\"overflow-scroll text-nowrap text-sm font-medium text-nd_gray-500 whitespace-pre  \">\n            {subHeading->React.string}\n          <\/p>\n        <\/RenderIf>\n        <RenderIf condition={subHeading->String.length == 0}>\n          <p\n            className=\"overflow-scroll text-nowrap text-sm font-medium text-nd_gray-500...","generations":["","",""],"best_bleu":0.0,"best_recall":0.0,"best_rougeL":0.0,"exact_match_any":0},{"file":"crates\/analytics\/src\/refunds\/metrics.rs","target_len":4161,"prompt_snippet":"use api_models::analytics::{\n    refunds::{\n        RefundDimensions, RefundFilters, RefundMetrics, RefundMetricsBucketIdentifier, RefundType,\n    },\n    Granularity, TimeRange,\n};\nuse diesel_models::enums as storage_enums;\nuse time::PrimitiveDateTime;\nmod refund_count;\nmod refund_processed_amount;\nmod refund_success_count;\nmod refund_success_rate;\nmod sessionized_metrics;\nuse std::collections::Ha...","target_snippet":"efund_type: Option<DBEnumWrapper<RefundType>>,\n    pub profile_id: Option<String>,\n    pub refund_reason: Option<String>,\n    pub refund_error_message: Option<String>,\n    pub total: Option<bigdecimal::BigDecimal>,\n    pub count: Option<i64>,\n    #[serde(with = \"common_utils::custom_serde::iso8601::option\")]\n    pub start_bucket: Option<PrimitiveDateTime>,\n    #[serde(with = \"common_utils::custom_...","generations":["","",""],"best_bleu":0.0,"best_recall":0.0,"best_rougeL":0.0,"exact_match_any":0},{"file":"crates\/api_models\/src\/routing.rs","target_len":19726,"prompt_snippet":"use std::fmt::Debug;\n\nuse common_utils::{errors::ParsingError, ext_traits::ValueExt, pii};\npub use euclid::{\n    dssa::types::EuclidAnalysable,\n    frontend::{\n        ast,\n        dir::{DirKeyKind, EuclidDirFilter},\n    },\n};\nuse serde::{Deserialize, Serialize};\nuse utoipa::ToSchema;\n\nuse crate::enums::{RoutableConnectors, TransactionType};\n\n#[derive(Debug, Clone, Serialize, Deserialize, ToSchema...","target_snippet":"}\n}\n\nimpl Eq for RoutableConnectorChoice {}\n\nimpl From<RoutableChoiceSerde> for RoutableConnectorChoice {\n    fn from(value: RoutableChoiceSerde) -> Self {\n        match value {\n            RoutableChoiceSerde::OnlyConnector(connector) => Self {\n                choice_kind: RoutableChoiceKind::OnlyConnector,\n                connector: *connector,\n                merchant_connector_id: None,\n      ...","generations":["","",""],"best_bleu":0.0,"best_recall":0.0,"best_rougeL":0.0,"exact_match_any":0},{"file":"src\/fragments\/ConnectorFragments\/ConnectorPaymentMethodv2\/PMSelectAll.res","target_len":4764,"prompt_snippet":"module PMSelectAll = {\n  @react.component\n  let make = (\n    ~availablePM: array<ConnectorTypes.paymentMethodConfigTypeV2>,\n    ~fieldsArray: array<ReactFinalForm.fieldRenderProps>,\n    ~pm,\n    ~pmt,\n  ) => {\n    open LogicUtils\n    open ConnectorPaymentMethodV2Utils\n    let pmEnabledInp = (fieldsArray[0]->Option.getOr(ReactFinalForm.fakeFieldRenderProps)).input\n    let pmEnabledValue =\n      pmE...","target_snippet":"        (\"payment_method_subtypes\", updatePMTData->Identity.genericTypeToJson),\n          ]\n          ->Dict.fromArray\n          ->Identity.anyTypeToReactEvent\n        pmArrayInp.onChange(updatedData)\n      } else if pm->getPMFromString == Card && pmt->getPMTFromString == Debit {\n        let pmtData = pmEnabledValue->Array.find(ele => ele.payment_method_type == pm)\n        let updatePMTData = swit...","generations":["","",""],"best_bleu":0.0,"best_recall":0.0,"best_rougeL":0.0,"exact_match_any":0},{"file":"crates\/router\/src\/db\/api_keys.rs","target_len":15186,"prompt_snippet":"use error_stack::report;\nuse router_env::{instrument, tracing};\n#[cfg(feature = \"accounts_cache\")]\nuse storage_impl::redis::cache::{self, CacheKind, ACCOUNTS_CACHE};\n\nuse super::{MockDb, Store};\nuse crate::{\n    connection,\n    core::errors::{self, CustomResult},\n    types::storage,\n};\n\n#[async_trait::async_trait]\npub trait ApiKeyInterface {\n    async fn insert_api_key(\n        &self,\n        api_...","target_snippet":"      }\n    }\n\n    #[instrument(skip_all)]\n    async fn revoke_api_key(\n        &self,\n        merchant_id: &common_utils::id_type::MerchantId,\n        key_id: &common_utils::id_type::ApiKeyId,\n    ) -> CustomResult<bool, errors::StorageError> {\n        let conn = connection::pg_connection_write(self).await?;\n        let delete_call = || async {\n            storage::ApiKey::revoke_by_merchant_id_k...","generations":["","",""],"best_bleu":0.0,"best_recall":0.0,"best_rougeL":0.0,"exact_match_any":0},{"file":"crates\/api_models\/src\/feature_matrix.rs","target_len":3158,"prompt_snippet":"use std::collections::HashSet;\n\nuse serde::{Deserialize, Serialize};\nuse utoipa::ToSchema;\n\n#[derive(Default, Debug, Deserialize, Serialize, Clone, ToSchema)]\npub struct FeatureMatrixRequest {\n    \/\/ List of connectors for which the feature matrix is requested\n    #[schema(value_type = Option<Vec<Connector>>)]\n    pub connectors: Option<Vec<common_enums::connector_enums::Connector>>,\n}\n\n#[derive(D...","target_snippet":"ist of supported card networks\n    #[schema(value_type = Vec<CardNetwork>)]\n    pub supported_card_networks: Vec<common_enums::CardNetwork>,\n}\n\n#[derive(Debug, Clone, ToSchema, Serialize)]\n#[serde(untagged)]\npub enum PaymentMethodSpecificFeatures {\n    \/\/\/ Card specific features\n    Card(CardSpecificFeatures),\n}\n\n#[derive(Debug, ToSchema, Serialize)]\npub struct SupportedPaymentMethod {\n    \/\/\/ The...","generations":["","",""],"best_bleu":0.0,"best_recall":0.0,"best_rougeL":0.0,"exact_match_any":0},{"file":"src\/screens\/Connectors\/PaymentProcessor\/ConnectorWalletDetails\/SamsungPay\/SamsungPayIntegrationUtils.res","target_len":1300,"prompt_snippet":"open SamsungPayIntegrationTypes\nopen LogicUtils\n\nlet samsungPayRequest = dict => {\n  merchant_business_country: dict->getString(\"merchant_business_country\", \"\"),\n  merchant_display_name: dict->getString(\"merchant_display_name\", \"\"),\n  service_id: dict->getString(\"service_id\", \"\"),\n  allowed_brands: dict->getStrArrayFromDict","target_snippet":"(\n    \"allowed_brands\",\n    [\"visa\", \"masterCard\", \"amex\", \"discover\"],\n  ),\n}\n\nlet samsungPayNameMapper = (~name) => {\n  `connector_wallets_details.samsung_pay.merchant_credentials.${name}`\n}\n\nlet samsungPayValueInput = (~samsungPayField: CommonConnectorTypes.inputField, ~fill) => {\n  open CommonConnectorHelper\n  let {\\\"type\", name} = samsungPayField\n  let formName = samsungPayNameMapper(~name)\n\n...","generations":["","",""],"best_bleu":0.0,"best_recall":0.0,"best_rougeL":0.0,"exact_match_any":0},{"file":"src\/icons\/ChevronIcon.res","target_len":186,"prompt_snippet":"open ReactNative\nopen Style\n\n@react.component\n","target_snippet":"let make = (~width=20., ~height=16., ~fill=\"#ffffff\") => {\n  <Icon\n    style={viewStyle(~transform=[rotate(~rotate=270.->deg)], ())}\n    name=\"back\"\n    height\n    width\n    fill\n  \/>\n}\n","generations":["","",""],"best_bleu":0.0,"best_recall":0.0,"best_rougeL":0.0,"exact_match_any":0},{"file":"src\/hooks\/CountryStateDataHookTypes.res","target_len":315,"prompt_snippet":"type country = {\n  isoAlpha2: string,\n  timeZones: array<string>,\n  value: str","target_snippet":"ing,\n  label: string,\n}\ntype state = {\n  label: string,\n  value: string,\n  code: string,\n}\ntype states = Dict.t<array<state>>\ntype countries = array<country>\ntype countryStateData = {\n  countries: countries,\n  states: states,\n}\nlet defaultTimeZone = {\n  timeZones: [],\n  value: \"-\",\n  label: \"\",\n  isoAlpha2: \"\",\n}\n","generations":["","",""],"best_bleu":0.0,"best_recall":0.0,"best_rougeL":0.0,"exact_match_any":0},{"file":"crates\/router\/src\/types\/api\/configs.rs","target_len":237,"prompt_snippet":"#[derive(Clone, serde::Serialize, Debug, serde::Deserialize","target_snippet":")]\npub struct Config {\n    pub key: String,\n    pub value: String,\n}\n\n#[derive(Clone, serde::Deserialize, Debug, serde::Serialize)]\npub struct ConfigUpdate {\n    #[serde(skip_deserializing)]\n    pub key: String,\n    pub value: String,\n}\n","generations":["","",""],"best_bleu":0.0,"best_recall":0.0,"best_rougeL":0.0,"exact_match_any":0},{"file":"src\/RevenueRecovery\/RevenueRecoveryScreens\/RecoveryProcessors\/RevenueRecoveryBillingProcessors\/RecoveryOnboardingBilling.res","target_len":5952,"prompt_snippet":"@react.component\nlet make = (\n  ~currentStep,\n  ~connectorID,\n  ~connector,\n  ~paymentConnectorName,\n  ~setConnectorName,\n  ~setNextStep,\n  ~profileId,\n  ~merchantId,\n  ~activeBusinessProfile,\n) => {\n  open APIUtils\n  open LogicUtils\n  open ConnectorUtils\n  open PageLoaderWrapper\n  open RevenueRecoveryOnboardingUtils\n\n  let getURL = useGetURL()\n  let mixpanelEvent = MixpanelHook.useSendEvent()\n  l...","target_snippet":"ector_label\",\n      `${connector}_${activeBusinessProfile}`->JSON.Encode.string,\n    )\n    initialValuesToDict->Dict.set(\"connector_type\", \"billing_processor\"->JSON.Encode.string)\n    initialValuesToDict->Dict.set(\"profile_id\", profileId->JSON.Encode.string)\n    initialValuesToDict->Dict.set(\n      \"connector_account_details\",\n      RevenueRecoveryData.connector_account_details,\n    )\n    initialV...","generations":["","",""],"best_bleu":0.0,"best_recall":0.0,"best_rougeL":0.0,"exact_match_any":0},{"file":"src\/screens\/Connectors\/PaymentProcessor\/ConnectorMetaData\/ApplePay\/ApplePaySimplifiedFlow.res","target_len":5113,"prompt_snippet":"open ApplePayIntegrationTypes\n@react.component\nlet make = (\n  ~applePayFields,\n  ~merchantBusinessCountry,\n  ~setApplePayIntegrationSteps,\n  ~setVefifiedDomainList,\n  ~connector,\n) => {\n  open LogicUtils\n  open APIUtils\n  open ApplePayIntegrationHelper\n  open ApplePayIntegrationUtils\n  let getURL = useGetURL()\n  let updateAPIHook = useUpdateMethod(~showErrorToast=false)\n  let fetchApi = AuthHooks....","target_snippet":"seEffect(() => {\n    setFormData()\n    None\n  }, [])\n  let onSubmit = async () => {\n    try {\n      let body = formState.values->constructVerifyApplePayReq(connectorID)\n      let verifyAppleUrl = getURL(~entityName=V1(VERIFY_APPLE_PAY), ~methodType=Post)\n      let _ = await updateAPIHook(`${verifyAppleUrl}\/${merchantId}`, body, Post)\n\n      let data =\n        formState.values\n        ->getDictFrom...","generations":["","",""],"best_bleu":0.0,"best_recall":0.0,"best_rougeL":0.0,"exact_match_any":0},{"file":"crates\/router\/src\/core\/mandate\/utils.rs","target_len":2765,"prompt_snippet":"use std::marker::PhantomData;\n\nuse common_utils::{errors::CustomResult, ext_traits::ValueExt};\nuse diesel_models::Mandate;\nuse error_stack::ResultExt;\n\nuse crate::{\n    core::{errors, payments::helpers},\n    types::{self, domain, PaymentAddress},\n    SessionState,\n};\n\nconst IRRELEVANT_ATTEMPT_ID_IN_MANDATE_REVOKE_FLOW: &str =\n    \"irrelevant_attempt_id_in_mandate_revoke_flow\";\n\nconst IRRELEVANT_CO...","target_snippet":"nt_account: &domain::MerchantAccount,\n    mandate: Mandate,\n) -> CustomResult<types::MandateRevokeRouterData, errors::ApiErrorResponse> {\n    let auth_type: types::ConnectorAuthType = merchant_connector_account\n        .get_connector_account_details()\n        .parse_value(\"ConnectorAuthType\")\n        .change_context(errors::ApiErrorResponse::InternalServerError)?;\n    let router_data = types::Rout...","generations":["","",""],"best_bleu":0.0,"best_recall":0.0,"best_rougeL":0.0,"exact_match_any":0},{"file":"crates\/analytics\/src\/errors.rs","target_len":1226,"prompt_snippet":"use api_models::errors::types::{ApiError, ApiErrorResponse};\nuse common_utils::errors::{CustomResult, ErrorSwitch};\n\npub type AnalyticsResult<T> = CustomResult<T, AnalyticsError>;\n\n#[derive(Debug, Clone, serde::Serialize, thiserror::Error)]\npub enum AnalyticsError {\n    #[allow(dead_code)]\n    #[error(\"No","target_snippet":"t implemented: {0}\")]\n    NotImplemented(&'static str),\n    #[error(\"Unknown Analytics Error\")]\n    UnknownError,\n    #[error(\"Access Forbidden Analytics Error\")]\n    AccessForbiddenError,\n    #[error(\"Failed to fetch currency exchange rate\")]\n    ForexFetchFailed,\n}\n\nimpl ErrorSwitch<ApiErrorResponse> for AnalyticsError {\n    fn switch(&self) -> ApiErrorResponse {\n        match self {\n           ...","generations":["","",""],"best_bleu":0.0,"best_recall":0.0,"best_rougeL":0.0,"exact_match_any":0},{"file":"src\/screens\/Hooks\/OMPCreateAccessHook.res","target_len":472,"prompt_snippet":"type adminType = [#tenant_admin | #org_admin | #merchant_admin | #non_admin]\n\nlet roleIdVariantMapper: string => admin","target_snippet":"Type = roleId => {\n  switch roleId {\n  | \"tenant_admin\" => #tenant_admin\n  | \"org_admin\" => #org_admin\n  | \"merchant_admin\" => #merchant_admin\n  | _ => #non_admin\n  }\n}\n\nlet useOMPCreateAccessHook: array<adminType> => CommonAuthTypes.authorization = allowedRoles => {\n  let {userInfo: {roleId}} = React.useContext(UserInfoProvider.defaultContext)\n  let roleIdTypedValue = roleId->roleIdVariantMapper\n...","generations":["","",""],"best_bleu":0.0,"best_recall":0.0,"best_rougeL":0.0,"exact_match_any":0},{"file":"src\/Payments\/PlaidSDKIframe.res","target_len":3510,"prompt_snippet":"@react.component\nlet make = () => {\n  open Utils\n\n  let (linkToken, setLinkToken) = React.useState(_ => \"\")\n  let (isReady, setIsReady) = React.useState(_ => false)\n  let (pmAuthConnectorsArr, setPmAuthConnectorsArr) = React.useState(_ => [])\n  let (publishableKey, setPublishableKey) = React.useState(_ => \"\")\n  let (clientSecret, setClientSecret) = React.useState(_ => \"\")\n  let (isForceSync, setIs...","target_snippet":"oken->String.length > 0 {\n        setLinkToken(_ => linkToken)\n        setPmAuthConnectorsArr(_ =>\n          metaData->getArray(\"pmAuthConnectorArray\")->Array.map(JSON.Decode.string)\n        )\n        setPublishableKey(_ => metaData->getString(\"publishableKey\", \"\"))\n        setClientSecret(_ => metaData->getString(\"clientSecret\", \"\"))\n        setIsForceSync(_ => metaData->getBool(\"isForceSync\", fa...","generations":["","",""],"best_bleu":0.0,"best_recall":0.0,"best_rougeL":0.0,"exact_match_any":0},{"file":"crates\/external_services\/src\/email\/no_email.rs","target_len":843,"prompt_snippet":"use common_utils::{errors::CustomResult, pii};\nuse router_env::logger;\n\nuse crate::email::{EmailClient, EmailError, EmailResult, IntermediateString};\n\n\/\/\/ Client when email support is disabled\n#[derive(Debug, C","target_snippet":"lone, Default, serde::Deserialize)]\npub struct NoEmailClient {}\n\nimpl NoEmailClient {\n    \/\/\/ Constructs a new client when email is disabled\n    pub async fn create() -> Self {\n        Self {}\n    }\n}\n\n#[async_trait::async_trait]\nimpl EmailClient for NoEmailClient {\n    type RichText = String;\n    fn convert_to_rich_text(\n        &self,\n        intermediate_string: IntermediateString,\n    ) -> Cus...","generations":["","",""],"best_bleu":0.0,"best_recall":0.0,"best_rougeL":0.0,"exact_match_any":0},{"file":"src\/screens\/Connectors\/PMAuthenticationProcessor\/PMAuthenticationHome.res","target_len":9895,"prompt_snippet":"module MenuOption = {\n  open HeadlessUI\n  @react.component\n  let make = (~disableConnector, ~isConnectorDisabled) => {\n    let showPopUp = PopUpState.useShowPopUp()\n    let openConfirmationPopUp = _ => {\n      showPopUp({\n        popUpType: (Warning, WithIcon),\n        heading: \"Confirm Action?\",\n        description: `You are about to ${isConnectorDisabled\n            ? \"Enable\"\n            : \"Dis...","target_snippet":"nectorListResponse = ConnectorListHook.useFetchConnectorList()\n\n  let activeBusinessProfile =\n    Recoil.useRecoilValueFromAtom(\n      HyperswitchAtom.businessProfilesAtom,\n    )->MerchantAccountUtils.getValueFromBusinessProfile\n\n  let isUpdateFlow = switch url.path->HSwitchUtils.urlPath {\n  | list{\"pm-authentication-processor\", \"new\"} => false\n  | _ => true\n  }\n\n  let connectorInfo = ConnectorInt...","generations":["","",""],"best_bleu":0.0,"best_recall":0.0,"best_rougeL":0.0,"exact_match_any":0},{"file":"src\/Recon\/ReconScreens\/ReconReports\/ReconReportsList.res","target_len":4040,"prompt_snippet":"@react.component\nlet make = () => {\n  open LogicUtils\n  let (offset, setOffset) = React.useState(_ => 0)\n  let {userHasAccess} = GroupACLHooks.useUserGroupACLHook()\n  let (selectedId, setSelectedId) = React.useState(_ =>\n    Dict.make()->ReconReportUtils.getAllReportPayloadType\n  )\n  let (showModal, setShowModal) = React.useState(_ => false)\n  let (searchText, setSearchText) = React.useState(_ => ...","target_snippet":"     ~xFeatureRoute=false,\n        ~forceCookies=false,\n      )\n      let response = await allReportsResponse->(res => res->Fetch.Response.json)\n      let data = response->getDictFromJsonObject->getArrayFromDict(\"data\", [])\n      let reportsList = data->ReconReportUtils.getArrayOfReportsListPayloadType\n      setConfiguredReports(_ => reportsList)\n      setFilteredReports(_ => reportsList->Array.ma...","generations":["","",""],"best_bleu":0.0,"best_recall":0.0,"best_rougeL":0.0,"exact_match_any":0},{"file":"src\/screens\/Analytics\/PerformanceMonitor\/GaugeChart\/CustomGraphs\/GaugeFailureRateUtils.res","target_len":1936,"prompt_snippet":"open PerformanceMonitorTypes\n\nlet getFailureRateData = (~args) => {\n  let count = args.optionalArgs->Option.getOr(0.0)\n  let failureCount = GaugeChartPerformanceUtils.getGaugeData(~args).value\n\n  let rate = failureCount \/. count *. 100.0\n  let value: PerformanceMonitorTypes.gaugeData = {value: rate}\n  value\n}\nlet falureGaugeOption = (data: gaugeData) =>\n  {\n    \"chart\": {\n      \"type\": \"gauge\",\n  ...","target_snippet":"erWidth\": 0,\n      \"plotShadow\": false,\n      \"height\": \"75%\",\n    },\n    \"pane\": {\n      \"startAngle\": -90,\n      \"endAngle\": 89.9,\n      \"background\": null,\n      \"center\": [\"50%\", \"75%\"],\n      \"size\": \"110%\",\n    },\n    \"yAxis\": {\n      \"min\": 0,\n      \"max\": 100,\n      \"tickPixelInterval\": 72,\n      \"tickPosition\": \"inside\",\n      \"tickColor\": \"#FFFFFF\",\n      \"tickLength\": 20,\n      \"tickWid...","generations":["","",""],"best_bleu":0.0,"best_recall":0.0,"best_rougeL":0.0,"exact_match_any":0},{"file":"src\/Components\/EmailPaymentInput.res","target_len":1544,"prompt_snippet":"open RecoilAtoms\nopen Utils\n\n@react.component\nlet make = (~paymentType) => {\n  let {localeString} = Recoil.useRecoilValueFromAtom(configAtom)\n  let loggerState = Recoil.useRecoilValueFromAtom(loggerAtom)\n  let (email, setEmail) = Recoil.useLoggedRecoilState(userEmailAddress, \"email\", loggerState)\n  let {fields} = Recoil.useRecoilValueFromAtom(optionAtom)\n\n  let showDetails = PaymentT","target_snippet":"ype.getShowDetails(\n    ~billingDetails=fields.billingDetails,\n    ~logger=loggerState,\n  )\n\n  let emailRef = React.useRef(Nullable.null)\n\n  let changeEmail = ev => {\n    let val: string = ReactEvent.Form.target(ev)[\"value\"]\n    setEmail(prev => {\n      value: val,\n      isValid: val->isEmailValid,\n      errorString: val->isEmailValid->Option.getOr(false) ? \"\" : prev.errorString,\n    })\n  }\n  let ...","generations":["","",""],"best_bleu":0.0,"best_recall":0.0,"best_rougeL":0.0,"exact_match_any":0},{"file":"src\/screens\/Connectors\/PaymentProcessor\/ConnectorUIUtils\/PaymentMethod.res","target_len":14560,"prompt_snippet":"let isSelectedAll = (\n  selectedPaymentMethod: array<ConnectorTypes.paymentMethodEnabled>,\n  allPaymentMethods,\n  paymentMethod,\n) => {\n  open ConnectorUtils\n  let paymentMethodObj = selectedPaymentMethod->getSelectedPaymentObj(paymentMethod)\n  switch paymentMethod->getPaymentMethodFromString {\n  | Card =>\n    paymentMethodObj.card_provider->Option.getOr([])->Array.length ==\n      allPaymentMethod...","target_snippet":"\n          | Processors(STRIPE_TEST) => false\n          | _ => true\n          }\n        }) || (paymentMethod->getPaymentMethodFromString === BankDebit && shouldShowPMAuthSidebar)\n    }\n\n    let removeOrAddMethods = (method: paymentMethodConfigType) => {\n      switch (\n        method.payment_method_type->getPaymentMethodTypeFromString,\n        paymentMethod->getPaymentMethodFromString,\n        conn...","generations":["","",""],"best_bleu":0.0,"best_recall":0.0,"best_rougeL":0.0,"exact_match_any":0},{"file":"crates\/common_utils\/src\/id_type\/global_id\/payment_methods.rs","target_len":4240,"prompt_snippet":"use error_stack::ResultExt;\n\nuse crate::{\n    errors::CustomResult,\n    id_type::global_id::{CellId, GlobalEntity, GlobalId},\n};\n\n\/\/\/ A global id that can be used to identify a payment method\n#[derive(\n    Debug,\n    Clone,\n    Hash,\n    PartialEq,\n    Eq,\n    serde::Serialize,\n    serde::Deserialize,\n    diesel::expression::AsExpression,\n)]\n#[diesel(sql_type = diesel::sql_types::Text)]\npub struct...","target_snippet":"onstruct GlobalPaymentMethodSessionId\")]\n    ConstructionError,\n}\n\nimpl GlobalPaymentMethodSessionId {\n    \/\/\/ Create a new GlobalPaymentMethodSessionId from cell id information\n    pub fn generate(\n        cell_id: &CellId,\n    ) -> error_stack::Result<Self, GlobalPaymentMethodSessionIdError> {\n        let global_id = GlobalId::generate(cell_id, GlobalEntity::PaymentMethodSession);\n        Ok(Sel...","generations":["","",""],"best_bleu":0.0,"best_recall":0.0,"best_rougeL":0.0,"exact_match_any":0},{"file":"src\/RevenueRecovery\/RevenueRecoveryScreens\/RecoveryProcessors\/RevenueRecoveryBillingProcessors\/BillingProcessorsReviewDetails.res","target_len":2767,"prompt_snippet":"module StepCard = {\n  @react.component\n  let make = (\n    ~stepName,\n    ~description=\"\",\n    ~isSelected,\n    ~onClick,\n    ~iconName,\n    ~isLoading=false,\n    ~customSelectionComponent,\n    ~customOuterClass=\"\",\n    ~customSelectionBorderClass=?,\n    ~isDisabled=false,\n  ) => {\n    let borderClass = switch (customSelectionBorderClass, isSelected) {\n    | (Some(val), true) => val\n    | (_, true)...","target_snippet":"dow justify-between w-full ${borderClass}  ${disabledClass} ${customOuterClass}`}\n      onClick={onClick}>\n      <div className=\"flex flex-row items-center gap-x-4 mr-5\">\n        <Icon name=iconName className=\"w-8 h-8\" \/>\n        <div className=\"flex flex-col gap-1\">\n          <h3 className=\"text-sm font-semibold text-nd_gray-600 leading-5\">\n            {stepName->React.string}\n          <\/h3>\n   ...","generations":["","",""],"best_bleu":0.0,"best_recall":0.0,"best_rougeL":0.0,"exact_match_any":0},{"file":"crates\/router\/src\/core\/payment_methods\/cards.rs","target_len":25236,"prompt_snippet":"use std::{\n    collections::{HashMap, HashSet},\n    fmt::Debug,\n    str::FromStr,\n};\n\n#[cfg(all(\n    any(feature = \"v1\", feature = \"v2\"),\n    not(feature = \"payment_methods_v2\")\n))]\nuse api_models::admin::PaymentMethodsEnabled;\nuse api_models::{\n    enums as api_enums,\n    payment_methods::{\n        BankAccountTokenData, Card, CardDetailUpdate, CardDetailsPaymentMethod, CardNetworkTypes,\n        C...","target_snippet":"chant_account.get_id(),\n            &key_store,\n            merchant_account.storage_scheme,\n        )\n        .await\n        .to_not_found_response(errors::ApiErrorResponse::CustomerNotFound)?;\n\n    let client_secret_expired =\n        authenticate_pm_client_secret_and_check_expiry(&client_secret, &payment_method)?;\n\n    if client_secret_expired {\n        return Err((errors::ApiErrorResponse::Clie...","generations":["","",""],"best_bleu":0.0,"best_recall":0.0,"best_rougeL":0.0,"exact_match_any":0},{"file":"crates\/router\/tests\/connectors\/payme.rs","target_len":15274,"prompt_snippet":"use std::str::FromStr;\n\nuse common_utils::{pii::Email, types::MinorUnit};\nuse diesel_models::types::OrderDetailsWithAmount;\nuse hyperswitch_domain_models::address::{Address, AddressDetails};\nuse masking::Secret;\nuse router::types::{self, domain, storage::enums, PaymentAddress};\n\nuse crate::{\n    connector_auth,\n    utils::{self, ConnectorActions, PaymentAuthorizeType},\n};\n\n#[derive(Clone, Copy)]\ns...","target_snippet":"payment response\");\n    assert_eq!(response.status, enums::AttemptStatus::Authorized);\n}\n\n\/\/ Captures a payment using the manual capture flow (Non 3DS).\n#[actix_web::test]\nasync fn should_capture_authorized_payment() {\n    let response = CONNECTOR\n        .authorize_and_capture_payment(payment_method_details(), None, get_default_payment_info())\n        .await\n        .expect(\"Capture payment respo...","generations":["","",""],"best_bleu":0.0,"best_recall":0.0,"best_rougeL":0.0,"exact_match_any":0},{"file":"src\/components\/HSwitchFeedBackModalUtils.res","target_len":1681,"prompt_snippet":"type modalType = FeedBackModal | RequestConnectorModal\n\nlet makeFieldInfo = FormRenderer.makeFieldInfo\n\nlet feedbackTextBox = makeFieldInfo(\n  ~label=\"\",\n  ~name=\"feedbacks\",\n  ~placeholder=\"Tell us in words...\",\n  ~customInput=InputFields.multiLineTextInput(~isDisabled=false, ~rows=Some(6), ~cols=Some(4)),\n)\n\ntype feedbackType = Suggestion | Bugs | RequestConnector | Other\n\nlet feedbackTypeList =...","target_snippet":"Other]\n\nlet getFeedBackStringFromVariant = feedbackType => {\n  switch feedbackType {\n  | Suggestion => \"Suggestion\"\n  | Bugs => \"Bugs\"\n  | RequestConnector => \"Request A Connector\"\n  | Other => \"Other\"\n  }\n}\n\nlet selectFeedbackType = makeFieldInfo(\n  ~name=\"category\",\n  ~label=\"\",\n  ~customInput=InputFields.radioInput(\n    ~options=feedbackTypeList->Array.map(getFeedBackStringFromVariant)->SelectB...","generations":["","",""],"best_bleu":0.0,"best_recall":0.0,"best_rougeL":0.0,"exact_match_any":0},{"file":"src\/entryPoints\/AuthModule\/AuthProviderTypes.res","target_len":225,"prompt_snippet":"type preLoginType = {\n  token: option<string>,\n  token_t","target_snippet":"ype: string,\n  email_token: option<string>,\n}\n\ntype authInfo = {token: option<string>}\n\ntype authType = Auth(authInfo)\n\ntype authStatus =\n  | LoggedOut\n  | PreLogin(preLoginType)\n  | LoggedIn(authType)\n  | CheckingAuthStatus\n","generations":["","",""],"best_bleu":0.0,"best_recall":0.0,"best_rougeL":0.0,"exact_match_any":0},{"file":"crates\/api_models\/src\/webhook_events.rs","target_len":6255,"prompt_snippet":"use common_enums::{EventClass, EventType, WebhookDeliveryAttempt};\nuse masking::Secret;\nuse serde::{Deserialize, Serialize};\nuse time::PrimitiveDateTime;\nuse utoipa::ToSchema;\n\n\/\/\/ The constraints to apply when filtering events.\n#[derive(Clone, Debug, Serialize, Deserialize, ToSchema)]\npub struct EventListConstraints {\n    \/\/\/ Filter events created after the specified time.\n    #[serde(default, wi...","target_snippet":"ivered: Option<bool>,\n    },\n    ObjectIdFilter {\n        object_id: String,\n    },\n}\n\n\/\/\/ The response body for each item when listing events.\n#[derive(Debug, Serialize, ToSchema)]\npub struct EventListItemResponse {\n    \/\/\/ The identifier for the Event.\n    #[schema(max_length = 64, example = \"evt_018e31720d1b7a2b82677d3032cab959\")]\n    pub event_id: String,\n\n    \/\/\/ The identifier for the Mercha...","generations":["","",""],"best_bleu":0.0,"best_recall":0.0,"best_rougeL":0.0,"exact_match_any":0},{"file":"src\/types\/SessionsType.res","target_len":3173,"prompt_snippet":"open SdkTypes\n\ntype samsungPaySession = {\n  wallet_name: string,\n  version: string,\n  service_id: string,\n  order_number: string,\n  merchant: JSON.t,\n  amount: JSON.t,\n  protocol: string,\n  allowed_brands: array<JSON.t>,\n}\n\ntype sessions = {\n  wallet_name: payment_method_type_wallet,\n  session_token: string,\n  session_id: string,\n  merchant_info: JSON.t,\n  allowed_payment_methods: array<JSON.t>,\n ...","target_snippet":"nnector_merchant_id: JSON.t,\n  merchant: JSON.t,\n  order_number: string,\n  service_id: string,\n  amount: JSON.t,\n  protocol: string,\n  allowed_brands: array<JSON.t>,\n}\nlet defaultToken = {\n  wallet_name: NONE,\n  session_token: \"\",\n  session_id: \"\",\n  merchant_info: JSON.Encode.null,\n  allowed_payment_methods: [],\n  transaction_info: JSON.Encode.null,\n  shipping_address_required: false,\n  billing_a...","generations":["","",""],"best_bleu":0.0,"best_recall":0.0,"best_rougeL":0.0,"exact_match_any":0},{"file":"src\/screens\/NewAnalytics\/SmartRetryAnalytics\/SuccessfulSmartRetryDistribution\/SuccessfulSmartRetryDistribution.res","target_len":3902,"prompt_snippet":"open NewAnalyticsTypes\nopen NewAnalyticsHelper\nopen BarGraphTypes\nopen NewSmartRetryAnalyticsEntity\nopen SuccessfulSmartRetryDistributionUtils\nopen SuccessfulSmartRetryDistributionTypes\n\nmodule TableModule = {\n  @react.component\n  let make = (~data, ~className=\"\", ~selectedTab: string) => {\n    let (offset, setOffset) = React.useState(_ => 0)\n    let defaultSort: Table.sortedObject = {\n      key: ...","target_snippet":"nt={tableData->Array.length}\n        tableLocalFilter=false\n        tableheadingClass=tableBorderClass\n        tableBorderClass\n        ignoreHeaderBg=true\n        tableDataBorderClass=tableBorderClass\n        isAnalyticsModule=true\n      \/>\n    <\/div>\n  }\n}\n\nmodule SuccessfulSmartRetryDistributionHeader = {\n  @react.component\n  let make = (~viewType, ~setViewType, ~groupBy, ~setGroupBy) => {\n    ...","generations":["","",""],"best_bleu":0.0,"best_recall":0.0,"best_rougeL":0.0,"exact_match_any":0},{"file":"src\/Components\/BillingNamePaymentInput.res","target_len":1928,"prompt_snippet":"open RecoilAtoms\nopen PaymentType\nopen Utils\n\n@react.component\nlet make = (~paymentType, ~customFieldName=None, ~requiredFields as optionalRequiredFields=?) => {\n  let {config, localeString} = Recoil.useRecoilValueFromAtom(configAtom)\n  let {fields} = Recoil.useRecoilValueFromAtom(optionAtom)\n  let loggerState = Recoil.useRecoilValueFromAtom(loggerAtom)\n\n  let (billingName, setBillingName) = Recoi...","target_snippet":"  )\n\n  let showDetails = getShowDetails(~billingDetails=fields.billingDetails, ~logger=loggerState)\n\n  let changeName = ev => {\n    let val: string = ReactEvent.Form.target(ev)[\"value\"]\n    setBillingName(prev => {\n      value: val,\n      isValid: Some(val !== \"\"),\n      errorString: val !== \"\" ? \"\" : prev.errorString,\n    })\n  }\n  let onBlur = ev => {\n    let val: string = ReactEvent.Focus.target...","generations":["","",""],"best_bleu":0.0,"best_recall":0.0,"best_rougeL":0.0,"exact_match_any":0},{"file":"src\/screens\/Connectors\/PaymentProcessor\/ConnectorMetaData\/GooglePay\/GPayFlow\/GPayFlowHelper.res","target_len":1642,"prompt_snippet":"module Landing = {\n  @react.component\n  let make = (\n    ~googlePayIntegrationType,\n    ~closeModal,\n    ~setGooglePayIntegrationStep,\n    ~setGooglePayIntegrationType,\n  ) => {\n    open GPayFlowTypes\n    open AdditionalDetailsSidebarHelper\n    <>\n      <div\n        className=\"p-6 m-2 cursor-pointer\"\n        onClick={_ => setGooglePayIntegrationType(_ => #payment_gateway)}>\n        <Card heading=\"...","target_snippet":"teway\" isSelected={googlePayIntegrationType === #payment_gateway}>\n          <div className={` mt-2 text-base text-hyperswitch_black opacity-50 font-normal`}>\n            {\"Integrate Google Pay with your payment gateway.\"->React.string}\n          <\/div>\n          <div className=\"flex gap-2 mt-4\">\n            <CustomTag tagText=\"Faster Configuration\" tagSize=4 tagLeftIcon=Some(\"ellipse-green\") \/>\n ...","generations":["","",""],"best_bleu":0.0,"best_recall":0.0,"best_rougeL":0.0,"exact_match_any":0},{"file":"crates\/api_models\/src\/events\/locker_migration.rs","target_len":234,"prompt_snippet":"use common_utils::events::ApiEventMetric;\n\nuse crate::lock","target_snippet":"er_migration::MigrateCardResponse;\n\nimpl ApiEventMetric for MigrateCardResponse {\n    fn get_api_event_type(&self) -> Option<common_utils::events::ApiEventsType> {\n        Some(common_utils::events::ApiEventsType::RustLocker)\n    }\n}\n","generations":["","",""],"best_bleu":0.0,"best_recall":0.0,"best_rougeL":0.0,"exact_match_any":0},{"file":"src\/components\/MobileView.res","target_len":124,"prompt_snippet":"@react.component\nlet make = (~ch","target_snippet":"ildren) => {\n  let isMobileView = MatchMedia.useMobileChecker()\n\n  <RenderIf condition=isMobileView> children <\/RenderIf>\n}\n","generations":["","",""],"best_bleu":0.0,"best_recall":0.0,"best_rougeL":0.0,"exact_match_any":0},{"file":"crates\/router\/tests\/connectors\/getnet.rs","target_len":11000,"prompt_snippet":"use hyperswitch_domain_models::payment_method_data::{Card, PaymentMethodData};\nuse masking::Secret;\nuse router::types::{self, api, storage::enums};\nuse test_utils::connector_auth;\n\nuse crate::utils::{self, ConnectorActions};\n\n#[derive(Clone, Copy)]\nstruct GetnetTest;\nimpl ConnectorActions for GetnetTest {}\nimpl utils::Connector for GetnetTest {\n    fn get_data(&self) -> api::ConnectorData {\n      ...","target_snippet":"_payment(payment_method_details(), get_default_payment_info())\n        .await\n        .expect(\"Authorize payment response\");\n    let txn_id = utils::get_connector_transaction_id(authorize_response.response);\n    let response = CONNECTOR\n        .psync_retry_till_status_matches(\n            enums::AttemptStatus::Authorized,\n            Some(types::PaymentsSyncData {\n                connector_transa...","generations":["","",""],"best_bleu":0.0,"best_recall":0.0,"best_rougeL":0.0,"exact_match_any":0},{"file":"crates\/router\/src\/db\/fraud_check.rs","target_len":3324,"prompt_snippet":"use diesel_models::fraud_check::{self as storage, FraudCheck, FraudCheckUpdate};\nuse error_stack::report;\nuse router_env::{instrument, tracing};\n\nuse super::MockDb;\nuse crate::{\n    connection,\n    core::errors::{self, CustomResult},\n    services::Store,\n};\n\n#[async_trait::async_trait]\npub trait FraudCheckInterface {\n    async fn insert_fraud_check_response(\n        &self,\n        new: storage::Fr...","target_snippet":"antId,\n    ) -> CustomResult<FraudCheck, errors::StorageError>;\n\n    async fn find_fraud_check_by_payment_id_if_present(\n        &self,\n        payment_id: common_utils::id_type::PaymentId,\n        merchant_id: common_utils::id_type::MerchantId,\n    ) -> CustomResult<Option<FraudCheck>, errors::StorageError>;\n}\n\n#[async_trait::async_trait]\nimpl FraudCheckInterface for Store {\n    #[instrument(skip...","generations":["","",""],"best_bleu":0.0,"best_recall":0.0,"best_rougeL":0.0,"exact_match_any":0},{"file":"src\/screens\/NewAnalytics\/PaymentAnalytics\/PaymentsOverviewSection\/NewPaymentsOverviewSectionHelper.res","target_len":1512,"prompt_snippet":"module SmartRetryCard = {\n  open NewAnalyticsHelper\n  open NewPaymentsOverviewSectionTypes\n  open NewPaymentsOverviewSectionUtils\n  open NewAnalyticsUtils\n  @react.component\n  let make = (~responseKey: overviewColumns, ~data) => {\n    open LogicUtils\n    let {filterValueJson} = React.useContext(FilterContext.filterContext)\n    let comparison = filterValueJson->getString(\"comp","target_snippet":"arison\", \"\")->DateRangeUtils.comparisonMapprer\n    let currency = filterValueJson->getString((#currency: NewAnalyticsTypes.filters :> string), \"\")\n    let config = getInfo(~responseKey)\n    let primaryValue = getValueFromObj(data, 0, responseKey->getStringFromVariant)\n    let secondaryValue = getValueFromObj(data, 1, responseKey->getStringFromVariant)\n\n    let (value, direction) = calculatePercent...","generations":["","",""],"best_bleu":0.0,"best_recall":0.0,"best_rougeL":0.0,"exact_match_any":0},{"file":"crates\/router\/tests\/connectors\/airwallex.rs","target_len":13580,"prompt_snippet":"use std::str::FromStr;\n\nuse hyperswitch_domain_models::address::{Address, AddressDetails};\nuse masking::{PeekInterface, Secret};\nuse router::types::{self, domain, storage::enums, AccessToken};\n\nuse crate::{\n    connector_auth,\n    utils::{self, Connector, ConnectorActions},\n};\n\n#[derive(Clone, Copy)]\nstruct AirwallexTest;\nimpl ConnectorActions for AirwallexTest {}\n\nstatic CONNECTOR: AirwallexTest ...","target_snippet":"ect(\"Authorize payment response\");\n    assert_eq!(response.status, enums::AttemptStatus::Authorized);\n}\n\n\/\/ Captures a payment using the manual capture flow (Non 3DS).\n#[serial_test::serial]\n#[actix_web::test]\nasync fn should_capture_authorized_payment() {\n    let response = CONNECTOR\n        .authorize_and_capture_payment(payment_method_details(), None, get_default_payment_info())\n        .await\n...","generations":["","",""],"best_bleu":0.0,"best_recall":0.0,"best_rougeL":0.0,"exact_match_any":0},{"file":"crates\/hyperswitch_connectors\/src\/connectors\/fiserv\/transformers.rs","target_len":18395,"prompt_snippet":"use common_enums::enums;\nuse common_utils::{ext_traits::ValueExt, pii, types::FloatMajorUnit};\nuse error_stack::ResultExt;\nuse hyperswitch_domain_models::{\n    payment_method_data::PaymentMethodData,\n    router_data::{ConnectorAuthType, RouterData},\n    router_flow_types::refunds::{Execute, RSync},\n    router_request_types::ResponseId,\n    router_response_types::{PaymentsResponseData, RefundsRespo...","target_snippet":"dConnectorConfig {\n                config: \"Merchant connector account metadata\",\n            })?;\n\n        let merchant_details = MerchantDetails {\n            merchant_id: auth.merchant_account,\n            terminal_id: Some(session.terminal_id),\n        };\n\n        let transaction_interaction = TransactionInteraction {\n            \/\/Payment is being made in online mode, card not present\n       ...","generations":["","",""],"best_bleu":0.0,"best_recall":0.0,"best_rougeL":0.0,"exact_match_any":0},{"file":"crates\/api_models\/src\/payments\/additional_info.rs","target_len":6653,"prompt_snippet":"use common_utils::new_type::{\n    MaskedBankAccount, MaskedIban, MaskedRoutingNumber, MaskedSortCode, MaskedUpiVpaId,\n};\nuse masking::Secret;\nuse utoipa::ToSchema;\n\nuse crate::enums as api_enums;\n\n#[derive(Eq, PartialEq, Clone, Debug, serde::Deserialize, serde::Serialize, ToSchema)]\n#[serde(rename_all = \"snake_case\")]\npub enum BankDebitAdditionalData {\n    Ach(Box<AchBankDebitAdditionalData>),\n   ...","target_snippet":"rType>, example = \"personal\")]\n    pub bank_holder_type: Option<common_enums::BankHolderType>,\n}\n\n#[derive(Eq, PartialEq, Clone, Debug, serde::Deserialize, serde::Serialize, ToSchema)]\npub struct BacsBankDebitAdditionalData {\n    \/\/\/ Partially masked account number for Bacs payment method\n    #[schema(value_type = String, example = \"0001****3456\")]\n    pub account_number: MaskedBankAccount,\n\n    \/...","generations":["","",""],"best_bleu":0.0,"best_recall":0.0,"best_rougeL":0.0,"exact_match_any":0},{"file":"crates\/router\/tests\/health_check.rs","target_len":196,"prompt_snippet":"mod utils;\n\nuse utils::{mk_service, AppClient};\n\n","target_snippet":"#[actix_web::test]\nasync fn health_check() {\n    let server = Box::pin(mk_service()).await;\n    let client = AppClient::guest();\n\n    assert_eq!(client.health(&server).await, \"health is good\");\n}\n","generations":["","",""],"best_bleu":0.0,"best_recall":0.0,"best_rougeL":0.0,"exact_match_any":0},{"file":"crates\/router\/src\/types\/storage.rs","target_len":2036,"prompt_snippet":"pub mod address;\npub mod api_keys;\npub mod authentication;\npub mod authorization;\npub mod blocklist;\npub mod blocklist_fingerprint;\npub mod blocklist_lookup;\npub mod business_profile;\npub mod callback_mapper;\npub mod capture;\npub mod cards_info;\npub mod configs;\npub mod customers;\npub mod dashboard_metadata;\npub mod dispute;\npub mod dynamic_routing_stats;\npub mod enums;\npub mod ephemeral_key;\npub ...","target_snippet":")]\npub mod kv;\npub mod locker_mock_up;\npub mod mandate;\npub mod merchant_account;\npub mod merchant_connector_account;\npub mod merchant_key_store;\npub mod payment_attempt;\npub mod payment_link;\npub mod payment_method;\npub mod payout_attempt;\npub mod payouts;\npub mod refund;\n#[cfg(feature = \"v2\")]\npub mod revenue_recovery;\npub mod reverse_lookup;\npub mod role;\npub mod routing_algorithm;\npub mod unif...","generations":["","",""],"best_bleu":0.0,"best_recall":0.0,"best_rougeL":0.0,"exact_match_any":0},{"file":"src\/screens\/Settings\/BusinessDetails.res","target_len":5528,"prompt_snippet":"open HSwitchSettingTypes\nopen MerchantAccountUtils\nopen APIUtils\nopen SettingsFieldsInfo\n\nmodule InfoOnlyView = {\n  @react.component\n  let make = (~heading, ~subHeading=\"Default value\") => {\n    <div className=\"flex flex-col gap-2 m-2 md:m-4\">\n      <p className=\"font-semibold text-fs-13\"> {heading->React.string} <\/p>\n      <p className=\"font-medium text-fs-13 text-black opacity-50 break-words\">\n ...","target_snippet":"tring}>\n            {switch formState {\n            | Preview => <InfoOnlyView heading={field.label} subHeading={defaultText} \/>\n            | Edit =>\n              <FormRenderer.FieldRenderer\n                labelClass=\"font-semibold !text-black\"\n                field={FormRenderer.makeFieldInfo(\n                  ~label=field.label,\n                  ~name=field.name,\n                  ~placehol...","generations":["","",""],"best_bleu":0.0,"best_recall":0.0,"best_rougeL":0.0,"exact_match_any":0}]